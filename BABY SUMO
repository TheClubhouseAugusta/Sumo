include <OrangutanLEDs.h>
#include <OrangutanAnalog.h>
#include <OrangutanMotors.h>
#include <OrangutanDigital.h>


/*
 * Pin Mappings on Baby-O to Mini Sumo
 * A0 -
 * A1 -
 * A2 - RRLine Sensor
 * A3 - FRLine Sensor
 * A4 - RLLine Sensor
 * A5 - FLLine Sensor
 * A6 -
 * A7 - Onboard Potentiometer
 * 
 * D0 -  UART RX
 * D1 -  UART TX / Red LED
 * D2 -  
 * D3 -  Motor 2 Control A
 * D4 -  
 * D5 -  Motor 1 Control A
 * D6 -  Motor 1 Control B
 * D7 -
 * D8 -  Input switch from Ardweeny - HIGH is ON, LOW is OFF
 * D9 -  
 * D10 - 
 * D11 - Motor 2 Control B
 * D12 -
 * D13 -
 */

OrangutanAnalog analog;
OrangutanLEDs leds;
OrangutanMotors motors;

int LeftMotorSpeed = 128;
int RightMotorSpeed = 128;
unsigned long TimerA;
unsigned long TimerB;
int Move = 0;
int Dir = 0;
char chr;
int opp;
int power;

int i = 0;

long randnum;
long randmove;

int leftmove;
int rightmove;

void setup()               // run once, when the sketch starts
{
  pinMode(2, OUTPUT);
  pinMode(8, INPUT);
  pinMode(7, OUTPUT);
  pinMode(4, OUTPUT);
  
  //digitalWrite(7, LOW);
  //digitalWrite(4, HIGH);
  
  digitalWrite(2, LOW);
  
  Serial.begin(9600);
  
  /*
  leds.red(HIGH);       // turn red LED on
  delay(1000);
  leds.red(LOW);
  delay(1000);
  leds.red(HIGH);
  delay(1000);
  leds.red(LOW);
  delay(1000);
  leds.red(HIGH);
  delay(1000);
  */
  
  Serial.println("Forward!");
}

void loop()                // run over and over again
{
  // note that the following line could also be accomplished with:
  // int pot = analog.read(7);
  //Serial.println("Test");
  while (Serial.available() > 0) {
    CheckSerial();    
  }
  
  CheckOpponant();
  Checkline();
  
  power = digitalRead(8);
  
  if(power == LOW) {
    i = 0;
    //Serial.println("Connect D8!");
  } else {
    i = 1;
  }
  
  if(i == 1) {
    motors.setSpeeds(LeftMotorSpeed, RightMotorSpeed); 
  } else {
    motors.setSpeeds(0, 0); //debugging mode!  
  }
  
}

  //2 -- Rear
  //3 -- Front Left
  //4 -- Rear Left
  //5 -- Front
  //6 -- Rear Right
  //7 -- Front Right

void CheckOpponant() {
  switch (opp) {
    case 0: //No opponant seen
      break;
    case 5: //Opponant directly in front
      LeftMotorSpeed = 255;
      RightMotorSpeed = 255;
      Move = 9;
      opp = 0;
      break;
    case 7: //Opponant 60 deg front right
      LeftMotorSpeed = 96;
      RightMotorSpeed = -96;
      Move = 9;
      opp = 0;
      break;
    case 6: //Opponant 60 deg rear right
      LeftMotorSpeed = 160;
      RightMotorSpeed = -160;
      Move = 9;
      opp = 0;
      break;
    case 2: //Opponant directly in rear
      LeftMotorSpeed = 255;
      RightMotorSpeed = -255;
      Move = 9;
      opp = 0;
      break;
    case 4: //Opponant 60 deg rear left
      LeftMotorSpeed = -160;
      RightMotorSpeed = 160;
      Move = 9;
      opp = 0;
      break;
    case 3: //Opponant 60 deg front left
      LeftMotorSpeed = -96;
      RightMotorSpeed = 96;
      Move = 9;
      opp = 0;
      break;
  }
}

void Checkline() {

  int RLLine = analogRead(4);
  int FLLine = analogRead(5);
  int RRLine = analogRead(2);
  int FRLine = analogRead(3);


  if(FLLine < 100 || FRLine < 100) {
    //Front Line sensors were tripped 
    randmove = random(250, 500);
    Move = 1;
    TimerA = millis() + 500;
    TimerB = millis() + 500 + randmove;
    //Serial.println("Line Detected Front!");
    //MoveDir = 1
   }
   
  if(RLLine < 100 || RRLine < 100) {
    //Rear Line sensors were tripped
    randmove = random(250, 500);
    Move = 3;
    TimerA = millis() + 500;
    TimerB = millis() + 500 + randmove;
    //Serial.println("Line Detected Rear!");
  } 
    
  switch (Move) {
    case 0:
      Dir = 0;
      LeftMotorSpeed = 128;
      RightMotorSpeed = 128;
      break;
    case 1:  //Front line sensors were tripped
      LeftMotorSpeed = -255;
      RightMotorSpeed = -255;
      Dir = 2;
      if(millis() > TimerA) {
        randnum = random(2);
        if (randnum == 0) {
          Dir = 1;
          leftmove = 175;
          rightmove = -175;
        } else {
          Dir = 4;
          leftmove = -175;
          rightmove = 175;
        }
        //Serial.println("Turning");
        Move = 2;
      }
      break;
    case 2:
      LeftMotorSpeed = leftmove;
      RightMotorSpeed = rightmove;
      if(millis() > TimerB) {         
        Move = 0;
        //Serial.println("Forward!");
      }
      break;
    case 3:
      Dir = 0;
      LeftMotorSpeed = 255;
      RightMotorSpeed = 255;
      if(millis() > TimerA) {
        randnum = random(2);
        if (randnum == 0) {
          Dir = 1;
          leftmove = 175;
          rightmove = -175;
        } else {
          Dir = 3;
          leftmove = -175;
          rightmove = 175;
        }
        //Serial.println("Turning");
        Move = 2;
      }
      break;
    case 9:
      TimerA = millis() + 50; //100 ms time out until next iteration from IR sensor
      Move = 10;
      break;
    case 10:
      if(millis() > TimerA) {
        Move = 0;
      }
      break;
  }

}

void CheckSerial() {
    chr = Serial.read();
    
    switch (chr) {
      case 48: //0
        //Serial.println("0");
        opp = 0;
        break;
      case 49: //1
        //Serial.println("1");
        opp = 1;
        break;
      case 50: //2
        //Serial.println("2");
        opp = 2;
        break;
      case 51: //3
        //Serial.println("3");
        opp = 3;
        break;
      case 52: //4
        //Serial.println("4");
        opp = 4;
        break;
      case 53: //5
        //Serial.println("5");
        opp = 5;
        break;
      case 54: //6
        //Serial.println("6");
        opp = 6;
        break;
      case 55: //7
        //Serial.println("7");
        opp = 7;
        break;
      case 56: //8
        //Serial.println("8");
        opp = 8;
        break;
      case 57: //9
        //Serial.println("9");
        opp = 9;
        break;
      case 13: //Return
        break;
      case 105: //i - initialize
        if(i == 0) {
          i = 1;
        } else {
          i = 0;
        }
        break;
      default: //Anything else return 'error'
        //Serial.println("!");
        break;
    }
}

  
